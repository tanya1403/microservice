name: Build & Deploy Public Service

on:
  push:
    branches:
      - master
    paths:
      - 'public/**'
      - '.github/workflows/build-public.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build Public Service
        run: |
          ./gradlew :public:clean
          ./gradlew :public:bootJar

      - name: Set Tag
        id: tag
        run: |
          TAG=$(TZ='Asia/Kolkata' date +'%Y%m%d%H%M')
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "::set-output name=tag::$TAG"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push Docker Image to ECR
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY=public_microservice
          IMAGE_TAG=${{ env.TAG }}

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./public
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Deploy Public Service to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_SSH_HOST }}
          username: ${{ secrets.EC2_SSH_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_REGION
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}

            IMAGE_TAG=${{ needs.build.outputs.tag }}
            ECR_REPOSITORY=public_microservice
            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            # Login to ECR
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull image and restart container
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

            docker stop public || true && docker rm public || true

            docker run -d --name public -p 8445:8081 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG